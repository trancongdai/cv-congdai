{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport { cubicBezier } from '../../easing/cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../../easing/ease.mjs';\nimport { circIn, circInOut, circOut } from '../../easing/circ.mjs';\nimport { backIn, backInOut, backOut } from '../../easing/back.mjs';\nimport { anticipate } from '../../easing/anticipate.mjs';\nconst easingLookup = {\n  linear: noop,\n  easeIn,\n  easeInOut,\n  easeOut,\n  circIn,\n  circInOut,\n  circOut,\n  backIn,\n  backInOut,\n  backOut,\n  anticipate\n};\n\nconst easingDefinitionToFunction = definition => {\n  if (Array.isArray(definition)) {\n    // If cubic bezier definition, create bezier curve\n    invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n    const [x1, y1, x2, y2] = definition;\n    return cubicBezier(x1, y1, x2, y2);\n  } else if (typeof definition === \"string\") {\n    // Else lookup from table\n    invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n    return easingLookup[definition];\n  }\n\n  return definition;\n};\n\nconst isEasingArray = ease => {\n  return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/animation/utils/easing.mjs"],"names":["invariant","cubicBezier","noop","easeIn","easeInOut","easeOut","circIn","circInOut","circOut","backIn","backInOut","backOut","anticipate","easingLookup","linear","easingDefinitionToFunction","definition","Array","isArray","length","x1","y1","x2","y2","undefined","isEasingArray","ease"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,uBAA3C;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,uBAA3C;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,uBAA3C;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAEZ,IADS;AAEjBC,EAAAA,MAFiB;AAGjBC,EAAAA,SAHiB;AAIjBC,EAAAA,OAJiB;AAKjBC,EAAAA,MALiB;AAMjBC,EAAAA,SANiB;AAOjBC,EAAAA,OAPiB;AAQjBC,EAAAA,MARiB;AASjBC,EAAAA,SATiB;AAUjBC,EAAAA,OAViB;AAWjBC,EAAAA;AAXiB,CAArB;;AAaA,MAAMG,0BAA0B,GAAIC,UAAD,IAAgB;AAC/C,MAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC3B;AACAhB,IAAAA,SAAS,CAACgB,UAAU,CAACG,MAAX,KAAsB,CAAvB,EAA2B,yDAA3B,CAAT;AACA,UAAM,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,IAAmBP,UAAzB;AACA,WAAOf,WAAW,CAACmB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAlB;AACH,GALD,MAMK,IAAI,OAAOP,UAAP,KAAsB,QAA1B,EAAoC;AACrC;AACAhB,IAAAA,SAAS,CAACa,YAAY,CAACG,UAAD,CAAZ,KAA6BQ,SAA9B,EAA0C,wBAAuBR,UAAW,GAA5E,CAAT;AACA,WAAOH,YAAY,CAACG,UAAD,CAAnB;AACH;;AACD,SAAOA,UAAP;AACH,CAbD;;AAcA,MAAMS,aAAa,GAAIC,IAAD,IAAU;AAC5B,SAAOT,KAAK,CAACC,OAAN,CAAcQ,IAAd,KAAuB,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAjD;AACH,CAFD;;AAIA,SAASX,0BAAT,EAAqCU,aAArC","sourcesContent":["import { invariant } from 'hey-listen';\nimport { cubicBezier } from '../../easing/cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../../easing/ease.mjs';\nimport { circIn, circInOut, circOut } from '../../easing/circ.mjs';\nimport { backIn, backInOut, backOut } from '../../easing/back.mjs';\nimport { anticipate } from '../../easing/anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };\n"]},"metadata":{},"sourceType":"module"}