{"ast":null,"code":"import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nclass HTMLVisualElement extends DOMVisualElement {\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      const computedStyle = getComputedStyle(instance);\n      const value = (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n      return typeof value === \"string\" ? value.trim() : value;\n    }\n  }\n\n  measureInstanceViewportBox(instance, _ref) {\n    let {\n      transformPagePoint\n    } = _ref;\n    return measureViewportBox(instance, transformPagePoint);\n  }\n\n  build(renderState, latestValues, options, props) {\n    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n  }\n\n  scrapeMotionValuesFromProps(props) {\n    return scrapeMotionValuesFromProps(props);\n  }\n\n  renderInstance(instance, renderState, styleProp, projection) {\n    renderHTML(instance, renderState, styleProp, projection);\n  }\n\n}\n\nexport { HTMLVisualElement, getComputedStyle };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs"],"names":["buildHTMLStyles","isCSSVariable","transformProps","scrapeMotionValuesFromProps","renderHTML","getDefaultValueType","measureViewportBox","DOMVisualElement","getComputedStyle","element","window","HTMLVisualElement","readValueFromInstance","instance","key","has","defaultType","default","computedStyle","value","getPropertyValue","trim","measureInstanceViewportBox","transformPagePoint","build","renderState","latestValues","options","props","transformTemplate","renderInstance","styleProp","projection"],"mappings":"AAAA,SAASA,eAAT,QAAgC,0BAAhC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAOC,MAAM,CAACF,gBAAP,CAAwBC,OAAxB,CAAP;AACH;;AACD,MAAME,iBAAN,SAAgCJ,gBAAhC,CAAiD;AAC7CK,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACjC,QAAIZ,cAAc,CAACa,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;AACzB,YAAME,WAAW,GAAGX,mBAAmB,CAACS,GAAD,CAAvC;AACA,aAAOE,WAAW,GAAGA,WAAW,CAACC,OAAZ,IAAuB,CAA1B,GAA8B,CAAhD;AACH,KAHD,MAIK;AACD,YAAMC,aAAa,GAAGV,gBAAgB,CAACK,QAAD,CAAtC;AACA,YAAMM,KAAK,GAAG,CAAClB,aAAa,CAACa,GAAD,CAAb,GACTI,aAAa,CAACE,gBAAd,CAA+BN,GAA/B,CADS,GAETI,aAAa,CAACJ,GAAD,CAFL,KAEe,CAF7B;AAGA,aAAO,OAAOK,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,IAAN,EAA5B,GAA2CF,KAAlD;AACH;AACJ;;AACDG,EAAAA,0BAA0B,CAACT,QAAD,QAAmC;AAAA,QAAxB;AAAEU,MAAAA;AAAF,KAAwB;AACzD,WAAOjB,kBAAkB,CAACO,QAAD,EAAWU,kBAAX,CAAzB;AACH;;AACDC,EAAAA,KAAK,CAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4C;AAC7C5B,IAAAA,eAAe,CAACyB,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,KAAK,CAACC,iBAA3C,CAAf;AACH;;AACD1B,EAAAA,2BAA2B,CAACyB,KAAD,EAAQ;AAC/B,WAAOzB,2BAA2B,CAACyB,KAAD,CAAlC;AACH;;AACDE,EAAAA,cAAc,CAACjB,QAAD,EAAWY,WAAX,EAAwBM,SAAxB,EAAmCC,UAAnC,EAA+C;AACzD5B,IAAAA,UAAU,CAACS,QAAD,EAAWY,WAAX,EAAwBM,SAAxB,EAAmCC,UAAnC,CAAV;AACH;;AAzB4C;;AA4BjD,SAASrB,iBAAT,EAA4BH,gBAA5B","sourcesContent":["import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props) {\n        return scrapeMotionValuesFromProps(props);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n"]},"metadata":{},"sourceType":"module"}