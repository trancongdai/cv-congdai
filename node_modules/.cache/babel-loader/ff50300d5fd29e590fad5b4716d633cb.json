{"ast":null,"code":"import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n  if (typeof origin === \"number\") {\n    return v => mix(origin, target, v);\n  } else if (color.test(origin)) {\n    return mixColor(origin, target);\n  } else {\n    return mixComplex(origin, target);\n  }\n}\n\nconst mixArray = (from, to) => {\n  const output = [...from];\n  const numValues = output.length;\n  const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n  return v => {\n    for (let i = 0; i < numValues; i++) {\n      output[i] = blendValue[i](v);\n    }\n\n    return output;\n  };\n};\n\nconst mixObject = (origin, target) => {\n  const output = { ...origin,\n    ...target\n  };\n  const blendValue = {};\n\n  for (const key in output) {\n    if (origin[key] !== undefined && target[key] !== undefined) {\n      blendValue[key] = getMixer(origin[key], target[key]);\n    }\n  }\n\n  return v => {\n    for (const key in blendValue) {\n      output[key] = blendValue[key](v);\n    }\n\n    return output;\n  };\n};\n\nconst mixComplex = (origin, target) => {\n  const template = complex.createTransformer(target);\n  const originStats = analyseComplexValue(origin);\n  const targetStats = analyseComplexValue(target);\n  const canInterpolate = originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;\n\n  if (canInterpolate) {\n    return pipe(mixArray(originStats.values, targetStats.values), template);\n  } else {\n    warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n    return p => `${p > 0 ? target : origin}`;\n  }\n};\n\nexport { mixArray, mixComplex, mixObject };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/utils/mix-complex.mjs"],"names":["mix","mixColor","pipe","warning","color","complex","analyseComplexValue","getMixer","origin","target","v","test","mixComplex","mixArray","from","to","output","numValues","length","blendValue","map","fromThis","i","mixObject","key","undefined","template","createTransformer","originStats","targetStats","canInterpolate","numColors","numNumbers","values","p"],"mappings":"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","sourcesContent":["import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n"]},"metadata":{},"sourceType":"module"}