{"ast":null,"code":"function decay(_ref) {\n  let {\n    /**\n     * The decay animation dynamically calculates an end of the animation\n     * based on the initial keyframe, so we only need to define a single keyframe\n     * as default.\n     */\n    keyframes = [0],\n    velocity = 0,\n    power = 0.8,\n    timeConstant = 350,\n    restDelta = 0.5,\n    modifyTarget\n  } = _ref;\n  const origin = keyframes[0];\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  const state = {\n    done: false,\n    value: origin\n  };\n  let amplitude = power * velocity;\n  const ideal = origin + amplitude;\n  const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n  /**\n   * If the target has changed we need to re-calculate the amplitude, otherwise\n   * the animation will start from the wrong position.\n   */\n\n  if (target !== ideal) amplitude = target - origin;\n  return {\n    next: t => {\n      const delta = -amplitude * Math.exp(-t / timeConstant);\n      state.done = !(delta > restDelta || delta < -restDelta);\n      state.value = state.done ? target : target + delta;\n      return state;\n    },\n    flipTarget: () => {}\n  };\n}\n\nexport { decay };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/animation/legacy-popmotion/decay.mjs"],"names":["decay","keyframes","velocity","power","timeConstant","restDelta","modifyTarget","origin","state","done","value","amplitude","ideal","target","undefined","next","t","delta","Math","exp","flipTarget"],"mappings":"AAAA,SAASA,KAAT,OAMkG;AAAA,MANnF;AACf;AACA;AACA;AACA;AACA;AACAC,IAAAA,SAAS,GAAG,CAAC,CAAD,CANG;AAMEC,IAAAA,QAAQ,GAAG,CANb;AAMgBC,IAAAA,KAAK,GAAG,GANxB;AAM6BC,IAAAA,YAAY,GAAG,GAN5C;AAMiDC,IAAAA,SAAS,GAAG,GAN7D;AAMkEC,IAAAA;AANlE,GAMmF;AAC9F,QAAMC,MAAM,GAAGN,SAAS,CAAC,CAAD,CAAxB;AACA;AACJ;AACA;AACA;;AACI,QAAMO,KAAK,GAAG;AAAEC,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAEH;AAAtB,GAAd;AACA,MAAII,SAAS,GAAGR,KAAK,GAAGD,QAAxB;AACA,QAAMU,KAAK,GAAGL,MAAM,GAAGI,SAAvB;AACA,QAAME,MAAM,GAAGP,YAAY,KAAKQ,SAAjB,GAA6BF,KAA7B,GAAqCN,YAAY,CAACM,KAAD,CAAhE;AACA;AACJ;AACA;AACA;;AACI,MAAIC,MAAM,KAAKD,KAAf,EACID,SAAS,GAAGE,MAAM,GAAGN,MAArB;AACJ,SAAO;AACHQ,IAAAA,IAAI,EAAGC,CAAD,IAAO;AACT,YAAMC,KAAK,GAAG,CAACN,SAAD,GAAaO,IAAI,CAACC,GAAL,CAAS,CAACH,CAAD,GAAKZ,YAAd,CAA3B;AACAI,MAAAA,KAAK,CAACC,IAAN,GAAa,EAAEQ,KAAK,GAAGZ,SAAR,IAAqBY,KAAK,GAAG,CAACZ,SAAhC,CAAb;AACAG,MAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACC,IAAN,GAAaI,MAAb,GAAsBA,MAAM,GAAGI,KAA7C;AACA,aAAOT,KAAP;AACH,KANE;AAOHY,IAAAA,UAAU,EAAE,MAAM,CAAG;AAPlB,GAAP;AASH;;AAED,SAASpB,KAAT","sourcesContent":["function decay({ \n/**\n * The decay animation dynamically calculates an end of the animation\n * based on the initial keyframe, so we only need to define a single keyframe\n * as default.\n */\nkeyframes = [0], velocity = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    const origin = keyframes[0];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\nexport { decay };\n"]},"metadata":{},"sourceType":"module"}