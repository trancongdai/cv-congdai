{"ast":null,"code":"import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nimport { getUnitConverter } from './utils/get-unit.es.js';\n\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\n\nfunction animateStyle(element, key, keyframesDefinition) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let AnimationPolyfill = arguments.length > 4 ? arguments[4] : undefined;\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation;\n  let {\n    duration = defaults.duration,\n    delay = defaults.delay,\n    endDelay = defaults.endDelay,\n    repeat = defaults.repeat,\n    easing = defaults.easing,\n    persist = false,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data = getAnimationData(element);\n  const valueIsTransform = isTransform(key);\n  let canAnimateNatively = supports.waapi();\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n\n  valueIsTransform && addTransformToElement(element, key);\n  const name = getStyleName(key);\n  const motionValue = getMotionValue(data.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n\n  const definition = transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n\n\n    let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n    /**\n     * Detect unit type of keyframes.\n     */\n\n    const toUnit = getUnitConverter(keyframes, definition);\n\n    if (isEasingGenerator(easing)) {\n      const custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\n      easing = custom.easing;\n      keyframes = custom.keyframes || keyframes;\n      duration = custom.duration || duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n\n\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we've been passed a custom easing function, and this browser\n     * does **not** support linear() easing, and the value is a transform\n     * (and thus a pure number) we can still support the custom easing\n     * by falling back to the animation polyfill.\n     */\n\n\n    if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || isEasingList(easing) && easing.some(isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\n     * If we can animate this value with WAAPI, do so.\n     */\n\n\n    if (canAnimateNatively) {\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes = keyframes.map(value => isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n\n\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n\n      const animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate({\n        [name]: keyframes,\n        offset,\n        easing: isEasingList(easing) ? easing.map(thisEasing => convertEasing(thisEasing, duration)) : undefined\n      }, animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n\n      if (!animation.finished) {\n        animation.finished = new Promise((resolve, reject) => {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n\n      const target = keyframes[keyframes.length - 1];\n      animation.finished.then(() => {\n        if (persist) return; // Apply styles to target\n\n        style.set(element, name, target); // Ensure fill modes don't persist\n\n        animation.cancel();\n      }).catch(noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (AnimationPolyfill && valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes = keyframes.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n\n      animation = new AnimationPolyfill(latest => {\n        style.set(element, name, toUnit ? toUnit(latest) : latest);\n      }, keyframes, Object.assign(Object.assign({}, options), {\n        duration,\n        easing\n      }));\n    } else {\n      const target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration,\n        delay: delay,\n        easing,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\n\nexport { animateStyle };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","defaults","isEasingGenerator","isFunction","isEasingList","isNumber","time","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getUnitConverter","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","AnimationPolyfill","record","isRecording","animation","duration","delay","endDelay","repeat","easing","persist","direction","offset","allowWebkitAcceleration","data","valueIsTransform","canAnimateNatively","waapi","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","toUnit","custom","createAnimation","cssRegisterProperty","linearEasing","some","map","value","toDefaultUnit","length","partialKeyframes","unshift","animationOptions","ms","undefined","iterations","fill","animate","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","latest","Object","assign","setAnimation"],"mappings":"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","sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nimport { getUnitConverter } from './utils/get-unit.es.js';\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation;\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, persist = false, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data = getAnimationData(element);\n    const valueIsTransform = isTransform(key);\n    let canAnimateNatively = supports.waapi();\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && addTransformToElement(element, key);\n    const name = getStyleName(key);\n    const motionValue = getMotionValue(data.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n        /**\n         * Detect unit type of keyframes.\n         */\n        const toUnit = getUnitConverter(keyframes, definition);\n        if (isEasingGenerator(easing)) {\n            const custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\n            easing = custom.easing;\n            keyframes = custom.keyframes || keyframes;\n            duration = custom.duration || duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (isCssVar(name)) {\n            if (supports.cssRegisterProperty()) {\n                registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we've been passed a custom easing function, and this browser\n         * does **not** support linear() easing, and the value is a transform\n         * (and thus a pure number) we can still support the custom easing\n         * by falling back to the animation polyfill.\n         */\n        if (valueIsTransform &&\n            !supports.linearEasing() &&\n            (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {\n            canAnimateNatively = false;\n        }\n        /**\n         * If we can animate this value with WAAPI, do so.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes.length === 1 &&\n                (!supports.partialKeyframes() || isRecording)) {\n                keyframes.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: time.ms(delay),\n                duration: time.ms(duration),\n                endDelay: time.ms(endDelay),\n                easing: !isEasingList(easing)\n                    ? convertEasing(easing, duration)\n                    : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation = element.animate({\n                [name]: keyframes,\n                offset,\n                easing: isEasingList(easing)\n                    ? easing.map((thisEasing) => convertEasing(thisEasing, duration))\n                    : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation.finished) {\n                animation.finished = new Promise((resolve, reject) => {\n                    animation.onfinish = resolve;\n                    animation.oncancel = reject;\n                });\n            }\n            const target = keyframes[keyframes.length - 1];\n            animation.finished\n                .then(() => {\n                if (persist)\n                    return;\n                // Apply styles to target\n                style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation.cancel();\n            })\n                .catch(noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (AnimationPolyfill && valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes.length === 1) {\n                keyframes.unshift(parseFloat(readInitialValue()));\n            }\n            animation = new AnimationPolyfill((latest) => {\n                style.set(element, name, toUnit ? toUnit(latest) : latest);\n            }, keyframes, Object.assign(Object.assign({}, options), { duration,\n                easing }));\n        }\n        else {\n            const target = keyframes[keyframes.length - 1];\n            style.set(element, name, definition && isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes, {\n                duration,\n                delay: delay,\n                easing,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation);\n        return animation;\n    };\n}\n\nexport { animateStyle };\n"]},"metadata":{},"sourceType":"module"}