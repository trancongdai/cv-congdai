{"ast":null,"code":"import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { env } from '../utils/process.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"Unmount\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      reducedMotionConfig,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    /**\n     * Tracks whether this VisualElement's React component is currently present\n     * within the defined React tree.\n     */\n\n    this.isPresent = true;\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.scheduleRender = () => sync.render(this.render, false, true);\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n\n\n  scrapeMotionValuesFromProps(_props) {\n    return {};\n  }\n\n  mount(instance) {\n    var _a;\n\n    this.current = instance;\n\n    if (this.projection) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n    if (this.parent) this.parent.children.add(this);\n    this.setProps(this.props);\n  }\n\n  unmount() {\n    var _a, _b, _c;\n\n    (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n    cancelSync.update(this.notifyUpdate);\n    cancelSync.render(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n    (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.onChange(latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && sync.update(this.notifyUpdate, false, true);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.onRenderRequest(this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) return 0;\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n    const features = [];\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n\n    if (env !== \"production\" && preloadedFeatures && isStrict) {\n      invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n    }\n\n    for (let i = 0; i < numFeatures; i++) {\n      const name = featureNames[i];\n      const {\n        isEnabled,\n        Component\n      } = featureDefinitions[name];\n      /**\n       * It might be possible in the future to use this moment to\n       * dynamically request functionality. In initial tests this\n       * was producing a lot of duplication amongst bundles.\n       */\n\n      if (isEnabled(renderedProps) && Component) {\n        features.push(createElement(Component, {\n          key: name,\n          ...renderedProps,\n          visualElement: this\n        }));\n      }\n    }\n\n    if (!this.projection && ProjectionNodeConstructor) {\n      this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n      const {\n        layoutId,\n        layout,\n        drag,\n        dragConstraints,\n        layoutScroll\n      } = renderedProps;\n      this.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: this,\n        scheduleRender: () => this.scheduleRender(),\n\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialLayoutGroupConfig,\n        layoutScroll\n      });\n    }\n\n    return features;\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.options, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Make a target animatable by Popmotion. For instance, if we're\n   * trying to animate width from 100px to 100vw we need to measure 100vw\n   * in pixels to determine what we really need to animate to. This is also\n   * pluggable to support Framer's custom value types like Color,\n   * and CSS variables.\n   */\n\n\n  makeTargetAnimatable(target) {\n    let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  setProps(props) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.props = props;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listener = props[\"on\" + key];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props), this.prevMotionValues);\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    var _a;\n\n    return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    var _a;\n\n    return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n  }\n\n  getVariantContext() {\n    let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _a, _b;\n\n    if (startAtParent) return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n\n    if (!this.isControllingVariants) {\n      const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n\n      return context;\n    }\n\n    const context = {};\n\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    var _a;\n\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    if (this.hasValue(key)) this.removeValue(key);\n    this.values.set(key, value);\n    this.latestValues[key] = value.get();\n    this.bindToMotionValue(key, value);\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    var _a;\n\n    this.values.delete(key);\n    (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n    this.valueSubscriptions.delete(key);\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n  /**\n   * Get a motion value for this key. If called with a default\n   * value, we'll create one if none exists.\n   */\n\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key) {\n    return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    var _a;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n  }\n\n}\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { VisualElement };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["sync","cancelSync","invariant","createElement","featureDefinitions","createBox","isRefObject","env","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","variantPriorityOrder","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","featureNames","Object","keys","numFeatures","length","propEventHandlers","VisualElement","constructor","parent","props","reducedMotionConfig","visualState","options","current","children","Set","shouldReduceMotion","values","Map","isPresent","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","variantChildren","manuallyAnimateOnMount","Boolean","willChange","initialMotionValues","scrapeMotionValuesFromProps","key","value","undefined","set","add","_props","mount","instance","_a","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","setProps","unmount","_b","_c","update","remove","call","delete","clear","valueIsTransform","has","removeOnChange","onChange","latestValue","onUpdate","isTransformDirty","removeOnRenderRequest","onRenderRequest","sortNodePosition","other","sortInstanceNodePosition","type","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","visualElement","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","makeTargetAnimatable","target","canMutate","makeTargetAnimatableFromInstance","transformTemplate","listener","on","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","numVariantProps","variantProps","prop","child","closestVariantNode","addValue","hasValue","removeValue","get","removeValueFromRenderState","getValue","defaultValue","owner","readValue","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","getBaseTargetFromProps","eventName","callback","args"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,QAAiC,wBAAjC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,wBAAT,QAAyC,mCAAzC;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,mCAA/D;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,qBAAT,EAAgCC,aAAhC,QAAqD,qCAArD;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYpB,kBAAZ,CAArB;AACA,MAAMqB,WAAW,GAAGH,YAAY,CAACI,MAAjC;AACA,MAAMC,iBAAiB,GAAG,CACtB,gBADsB,EAEtB,mBAFsB,EAGtB,QAHsB,EAItB,SAJsB,EAKtB,qBALsB,EAMtB,eANsB,EAOtB,sBAPsB,EAQtB,yBARsB,CAA1B;AAUA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,OAAqE;AAAA,QAApE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA,mBAAjB;AAAsCC,MAAAA;AAAtC,KAAoE;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC5E;AACR;AACA;AACA;AACQ,SAAKC,OAAL,GAAe,IAAf;AACA;AACR;AACA;;AACQ,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA;AACR;AACA;;AACQ,SAAKnB,aAAL,GAAqB,KAArB;AACA,SAAKD,qBAAL,GAA6B,KAA7B;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKqB,kBAAL,GAA0B,IAA1B;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,IAAjB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,kBAAL,GAA0B,IAAIF,GAAJ,EAA1B;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKG,gBAAL,GAAwB,EAAxB;AACA;AACR;AACA;;AACQ,SAAKC,MAAL,GAAc,EAAd;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,sBAAL,GAA8B,EAA9B;;AACA,SAAKC,YAAL,GAAoB,MAAM,KAAKC,MAAL,CAAY,QAAZ,EAAsB,KAAKC,YAA3B,CAA1B;;AACA,SAAKC,MAAL,GAAc,MAAM;AAChB,UAAI,CAAC,KAAKd,OAAV,EACI;AACJ,WAAKe,YAAL;AACA,WAAKC,cAAL,CAAoB,KAAKhB,OAAzB,EAAkC,KAAKiB,WAAvC,EAAoD,KAAKrB,KAAL,CAAWsB,KAA/D,EAAsE,KAAKC,UAA3E;AACH,KALD;;AAMA,SAAKC,cAAL,GAAsB,MAAMvD,IAAI,CAACiD,MAAL,CAAY,KAAKA,MAAjB,EAAyB,KAAzB,EAAgC,IAAhC,CAA5B;;AACA,UAAM;AAAED,MAAAA,YAAF;AAAgBI,MAAAA;AAAhB,QAAgCnB,WAAtC;AACA,SAAKe,YAAL,GAAoBA,YAApB;AACA,SAAKQ,UAAL,GAAkB,EAAE,GAAGR;AAAL,KAAlB;AACA,SAAKS,aAAL,GAAqB1B,KAAK,CAAC2B,OAAN,GAAgB,EAAE,GAAGV;AAAL,KAAhB,GAAsC,EAA3D;AACA,SAAKI,WAAL,GAAmBA,WAAnB;AACA,SAAKtB,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAK4B,KAAL,GAAa7B,MAAM,GAAGA,MAAM,CAAC6B,KAAP,GAAe,CAAlB,GAAsB,CAAzC;AACA,SAAK3B,mBAAL,GAA2BA,mBAA3B;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKjB,qBAAL,GAA6BA,qBAAqB,CAACc,KAAD,CAAlD;AACA,SAAKb,aAAL,GAAqBA,aAAa,CAACa,KAAD,CAAlC;;AACA,QAAI,KAAKb,aAAT,EAAwB;AACpB,WAAK0C,eAAL,GAAuB,IAAIvB,GAAJ,EAAvB;AACH;;AACD,SAAKwB,sBAAL,GAA8BC,OAAO,CAAChC,MAAM,IAAIA,MAAM,CAACK,OAAlB,CAArC;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,UAAM;AAAE4B,MAAAA,UAAF;AAAc,SAAGC;AAAjB,QAAyC,KAAKC,2BAAL,CAAiClC,KAAjC,CAA/C;;AACA,SAAK,MAAMmC,GAAX,IAAkBF,mBAAlB,EAAuC;AACnC,YAAMG,KAAK,GAAGH,mBAAmB,CAACE,GAAD,CAAjC;;AACA,UAAIlB,YAAY,CAACkB,GAAD,CAAZ,KAAsBE,SAAtB,IAAmCtD,aAAa,CAACqD,KAAD,CAApD,EAA6D;AACzDA,QAAAA,KAAK,CAACE,GAAN,CAAUrB,YAAY,CAACkB,GAAD,CAAtB,EAA6B,KAA7B;;AACA,YAAIrD,uBAAuB,CAACkD,UAAD,CAA3B,EAAyC;AACrCA,UAAAA,UAAU,CAACO,GAAX,CAAeJ,GAAf;AACH;AACJ;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACID,EAAAA,2BAA2B,CAACM,MAAD,EAAS;AAChC,WAAO,EAAP;AACH;;AACDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACZ,QAAIC,EAAJ;;AACA,SAAKvC,OAAL,GAAesC,QAAf;;AACA,QAAI,KAAKnB,UAAT,EAAqB;AACjB,WAAKA,UAAL,CAAgBkB,KAAhB,CAAsBC,QAAtB;AACH;;AACD,QAAI,KAAK3C,MAAL,IAAe,KAAKZ,aAApB,IAAqC,CAAC,KAAKD,qBAA/C,EAAsE;AAClE,WAAK0D,qBAAL,GAA6B,CAACD,EAAE,GAAG,KAAK5C,MAAX,MAAuB,IAAvB,IAA+B4C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACE,eAAH,CAAmB,IAAnB,CAArF;AACH;;AACD,SAAKrC,MAAL,CAAYsC,OAAZ,CAAoB,CAACV,KAAD,EAAQD,GAAR,KAAgB,KAAKY,iBAAL,CAAuBZ,GAAvB,EAA4BC,KAA5B,CAApC;;AACA,QAAI,CAAC1D,wBAAwB,CAAC0B,OAA9B,EAAuC;AACnC3B,MAAAA,wBAAwB;AAC3B;;AACD,SAAK8B,kBAAL,GACI,KAAKN,mBAAL,KAA6B,OAA7B,GACM,KADN,GAEM,KAAKA,mBAAL,KAA6B,QAA7B,GACI,IADJ,GAEItB,oBAAoB,CAACyB,OALnC;AAMA,QAAI,KAAKL,MAAT,EACI,KAAKA,MAAL,CAAYM,QAAZ,CAAqBkC,GAArB,CAAyB,IAAzB;AACJ,SAAKS,QAAL,CAAc,KAAKhD,KAAnB;AACH;;AACDiD,EAAAA,OAAO,GAAG;AACN,QAAIN,EAAJ,EAAQO,EAAR,EAAYC,EAAZ;;AACA,KAACR,EAAE,GAAG,KAAKpB,UAAX,MAA2B,IAA3B,IAAmCoB,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACM,OAAH,EAA5D;AACA/E,IAAAA,UAAU,CAACkF,MAAX,CAAkB,KAAKrC,YAAvB;AACA7C,IAAAA,UAAU,CAACgD,MAAX,CAAkB,KAAKA,MAAvB;AACA,SAAKP,kBAAL,CAAwBmC,OAAxB,CAAiCO,MAAD,IAAYA,MAAM,EAAlD;AACA,KAACH,EAAE,GAAG,KAAKN,qBAAX,MAAsC,IAAtC,IAA8CM,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAACI,IAAH,CAAQ,IAAR,CAAvE;AACA,KAACH,EAAE,GAAG,KAAKpD,MAAX,MAAuB,IAAvB,IAA+BoD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC9C,QAAH,CAAYkD,MAAZ,CAAmB,IAAnB,CAAxD;;AACA,SAAK,MAAMpB,GAAX,IAAkB,KAAKtB,MAAvB,EAA+B;AAC3B,WAAKA,MAAL,CAAYsB,GAAZ,EAAiBqB,KAAjB;AACH;;AACD,SAAKpD,OAAL,GAAe,IAAf;AACH;;AACD2C,EAAAA,iBAAiB,CAACZ,GAAD,EAAMC,KAAN,EAAa;AAC1B,UAAMqB,gBAAgB,GAAGzE,cAAc,CAAC0E,GAAf,CAAmBvB,GAAnB,CAAzB;AACA,UAAMwB,cAAc,GAAGvB,KAAK,CAACwB,QAAN,CAAgBC,WAAD,IAAiB;AACnD,WAAK5C,YAAL,CAAkBkB,GAAlB,IAAyB0B,WAAzB;AACA,WAAK7D,KAAL,CAAW8D,QAAX,IACI7F,IAAI,CAACmF,MAAL,CAAY,KAAKrC,YAAjB,EAA+B,KAA/B,EAAsC,IAAtC,CADJ;;AAEA,UAAI0C,gBAAgB,IAAI,KAAKlC,UAA7B,EAAyC;AACrC,aAAKA,UAAL,CAAgBwC,gBAAhB,GAAmC,IAAnC;AACH;AACJ,KAPsB,CAAvB;AAQA,UAAMC,qBAAqB,GAAG5B,KAAK,CAAC6B,eAAN,CAAsB,KAAKzC,cAA3B,CAA9B;AACA,SAAKb,kBAAL,CAAwB2B,GAAxB,CAA4BH,GAA5B,EAAiC,MAAM;AACnCwB,MAAAA,cAAc;AACdK,MAAAA,qBAAqB;AACxB,KAHD;AAIH;;AACDE,EAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpB;AACR;AACA;AACQ,QAAI,CAAC,KAAK/D,OAAN,IACA,CAAC,KAAKgE,wBADN,IAEA,KAAKC,IAAL,KAAcF,KAAK,CAACE,IAFxB,EAGI,OAAO,CAAP;AACJ,WAAO,KAAKD,wBAAL,CAA8B,KAAKhE,OAAnC,EAA4C+D,KAAK,CAAC/D,OAAlD,CAAP;AACH;;AACDkE,EAAAA,YAAY,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,iBAA1B,EAA6CC,YAA7C,EAA2DC,yBAA3D,EAAsFC,wBAAtF,EAAgH;AACxH,UAAMC,QAAQ,GAAG,EAAjB;AACA;AACR;AACA;AACA;;AACQ,QAAIrG,GAAG,KAAK,YAAR,IAAwBiG,iBAAxB,IAA6CD,QAAjD,EAA2D;AACvDrG,MAAAA,SAAS,CAAC,KAAD,EAAQ,kJAAR,CAAT;AACH;;AACD,SAAK,IAAI2G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpF,WAApB,EAAiCoF,CAAC,EAAlC,EAAsC;AAClC,YAAMC,IAAI,GAAGxF,YAAY,CAACuF,CAAD,CAAzB;AACA,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA2B5G,kBAAkB,CAAC0G,IAAD,CAAnD;AACA;AACZ;AACA;AACA;AACA;;AACY,UAAIC,SAAS,CAACT,aAAD,CAAT,IAA4BU,SAAhC,EAA2C;AACvCJ,QAAAA,QAAQ,CAACK,IAAT,CAAc9G,aAAa,CAAC6G,SAAD,EAAY;AACnC9C,UAAAA,GAAG,EAAE4C,IAD8B;AAEnC,aAAGR,aAFgC;AAGnCY,UAAAA,aAAa,EAAE;AAHoB,SAAZ,CAA3B;AAKH;AACJ;;AACD,QAAI,CAAC,KAAK5D,UAAN,IAAoBoD,yBAAxB,EAAmD;AAC/C,WAAKpD,UAAL,GAAkB,IAAIoD,yBAAJ,CAA8BD,YAA9B,EAA4C,KAAKzD,YAAjD,EAA+D,KAAKlB,MAAL,IAAe,KAAKA,MAAL,CAAYwB,UAA1F,CAAlB;AACA,YAAM;AAAE6D,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA,IAApB;AAA0BC,QAAAA,eAA1B;AAA2CC,QAAAA;AAA3C,UAA4DjB,aAAlE;AACA,WAAKhD,UAAL,CAAgBkE,UAAhB,CAA2B;AACvBL,QAAAA,QADuB;AAEvBC,QAAAA,MAFuB;AAGvBK,QAAAA,mBAAmB,EAAE3D,OAAO,CAACuD,IAAD,CAAP,IAChBC,eAAe,IAAIhH,WAAW,CAACgH,eAAD,CAJZ;AAKvBJ,QAAAA,aAAa,EAAE,IALQ;AAMvB3D,QAAAA,cAAc,EAAE,MAAM,KAAKA,cAAL,EANC;;AAOvB;AAChB;AACA;AACA;AACA;AACA;AACA;AACgBmE,QAAAA,aAAa,EAAE,OAAON,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,MAd9B;AAevBO,QAAAA,sBAAsB,EAAEhB,wBAfD;AAgBvBY,QAAAA;AAhBuB,OAA3B;AAkBH;;AACD,WAAOX,QAAP;AACH;;AACD1D,EAAAA,YAAY,GAAG;AACX,SAAK0E,KAAL,CAAW,KAAKxE,WAAhB,EAA6B,KAAKJ,YAAlC,EAAgD,KAAKd,OAArD,EAA8D,KAAKH,KAAnE;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI8F,EAAAA,kBAAkB,GAAG;AACjB,WAAO,KAAK1F,OAAL,GACD,KAAK2F,0BAAL,CAAgC,KAAK3F,OAArC,EAA8C,KAAKJ,KAAnD,CADC,GAED1B,SAAS,EAFf;AAGH;;AACD0H,EAAAA,cAAc,CAAC7D,GAAD,EAAM;AAChB,WAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,CAAP;AACH;;AACD8D,EAAAA,cAAc,CAAC9D,GAAD,EAAMC,KAAN,EAAa;AACvB,SAAKnB,YAAL,CAAkBkB,GAAlB,IAAyBC,KAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI8D,EAAAA,oBAAoB,CAACC,MAAD,EAA2B;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;AAC3C,WAAO,KAAKC,gCAAL,CAAsCF,MAAtC,EAA8C,KAAKnG,KAAnD,EAA0DoG,SAA1D,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIpD,EAAAA,QAAQ,CAAChD,KAAD,EAAQ;AACZ,QAAIA,KAAK,CAACsG,iBAAN,IAA2B,KAAKtG,KAAL,CAAWsG,iBAA1C,EAA6D;AACzD,WAAK9E,cAAL;AACH;;AACD,SAAKxB,KAAL,GAAaA,KAAb;AACA;AACR;AACA;;AACQ,SAAK,IAAI8E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlF,iBAAiB,CAACD,MAAtC,EAA8CmF,CAAC,EAA/C,EAAmD;AAC/C,YAAM3C,GAAG,GAAGvC,iBAAiB,CAACkF,CAAD,CAA7B;;AACA,UAAI,KAAKhE,sBAAL,CAA4BqB,GAA5B,CAAJ,EAAsC;AAClC,aAAKrB,sBAAL,CAA4BqB,GAA5B;AACA,eAAO,KAAKrB,sBAAL,CAA4BqB,GAA5B,CAAP;AACH;;AACD,YAAMoE,QAAQ,GAAGvG,KAAK,CAAC,OAAOmC,GAAR,CAAtB;;AACA,UAAIoE,QAAJ,EAAc;AACV,aAAKzF,sBAAL,CAA4BqB,GAA5B,IAAmC,KAAKqE,EAAL,CAAQrE,GAAR,EAAaoE,QAAb,CAAnC;AACH;AACJ;;AACD,SAAK3F,gBAAL,GAAwBvB,2BAA2B,CAAC,IAAD,EAAO,KAAK6C,2BAAL,CAAiClC,KAAjC,CAAP,EAAgD,KAAKY,gBAArD,CAAnD;AACH;;AACD6F,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKzG,KAAZ;AACH;AACD;AACJ;AACA;;;AACI0G,EAAAA,UAAU,CAAC3B,IAAD,EAAO;AACb,QAAIpC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAG,KAAK3C,KAAL,CAAW2G,QAAjB,MAA+B,IAA/B,IAAuChE,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACoC,IAAD,CAAzE;AACH;AACD;AACJ;AACA;;;AACI6B,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAK5G,KAAL,CAAW6G,UAAlB;AACH;;AACDC,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAK9G,KAAL,CAAW+G,kBAAlB;AACH;;AACDC,EAAAA,qBAAqB,GAAG;AACpB,QAAIrE,EAAJ;;AACA,WAAO,KAAKxD,aAAL,GAAqB,IAArB,GAA4B,CAACwD,EAAE,GAAG,KAAK5C,MAAX,MAAuB,IAAvB,IAA+B4C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACqE,qBAAH,EAA3F;AACH;;AACDC,EAAAA,iBAAiB,GAAwB;AAAA,QAAvBC,aAAuB,uEAAP,KAAO;;AACrC,QAAIvE,EAAJ,EAAQO,EAAR;;AACA,QAAIgE,aAAJ,EACI,OAAO,CAACvE,EAAE,GAAG,KAAK5C,MAAX,MAAuB,IAAvB,IAA+B4C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACsE,iBAAH,EAA/D;;AACJ,QAAI,CAAC,KAAK/H,qBAAV,EAAiC;AAC7B,YAAMiI,OAAO,GAAG,CAAC,CAACjE,EAAE,GAAG,KAAKnD,MAAX,MAAuB,IAAvB,IAA+BmD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC+D,iBAAH,EAAzD,KAAoF,EAApG;;AACA,UAAI,KAAKjH,KAAL,CAAW2B,OAAX,KAAuBU,SAA3B,EAAsC;AAClC8E,QAAAA,OAAO,CAACxF,OAAR,GAAkB,KAAK3B,KAAL,CAAW2B,OAA7B;AACH;;AACD,aAAOwF,OAAP;AACH;;AACD,UAAMA,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsC,eAApB,EAAqCtC,CAAC,EAAtC,EAA0C;AACtC,YAAMC,IAAI,GAAGsC,YAAY,CAACvC,CAAD,CAAzB;AACA,YAAMwC,IAAI,GAAG,KAAKtH,KAAL,CAAW+E,IAAX,CAAb;;AACA,UAAI3F,cAAc,CAACkI,IAAD,CAAd,IAAwBA,IAAI,KAAK,KAArC,EAA4C;AACxCH,QAAAA,OAAO,CAACpC,IAAD,CAAP,GAAgBuC,IAAhB;AACH;AACJ;;AACD,WAAOH,OAAP;AACH;AACD;AACJ;AACA;;;AACItE,EAAAA,eAAe,CAAC0E,KAAD,EAAQ;AACnB,QAAI5E,EAAJ;;AACA,UAAM6E,kBAAkB,GAAG,KAAKR,qBAAL,EAA3B;;AACA,QAAIQ,kBAAJ,EAAwB;AACpB,OAAC7E,EAAE,GAAG6E,kBAAkB,CAAC3F,eAAzB,MAA8C,IAA9C,IAAsDc,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACJ,GAAH,CAAOgF,KAAP,CAA/E;AACA,aAAO,MAAMC,kBAAkB,CAAC3F,eAAnB,CAAmC0B,MAAnC,CAA0CgE,KAA1C,CAAb;AACH;AACJ;AACD;AACJ;AACA;;;AACIE,EAAAA,QAAQ,CAACtF,GAAD,EAAMC,KAAN,EAAa;AACjB;AACA,QAAI,KAAKsF,QAAL,CAAcvF,GAAd,CAAJ,EACI,KAAKwF,WAAL,CAAiBxF,GAAjB;AACJ,SAAK3B,MAAL,CAAY8B,GAAZ,CAAgBH,GAAhB,EAAqBC,KAArB;AACA,SAAKnB,YAAL,CAAkBkB,GAAlB,IAAyBC,KAAK,CAACwF,GAAN,EAAzB;AACA,SAAK7E,iBAAL,CAAuBZ,GAAvB,EAA4BC,KAA5B;AACH;AACD;AACJ;AACA;;;AACIuF,EAAAA,WAAW,CAACxF,GAAD,EAAM;AACb,QAAIQ,EAAJ;;AACA,SAAKnC,MAAL,CAAY+C,MAAZ,CAAmBpB,GAAnB;AACA,KAACQ,EAAE,GAAG,KAAKhC,kBAAL,CAAwBiH,GAAxB,CAA4BzF,GAA5B,CAAN,MAA4C,IAA5C,IAAoDQ,EAAE,KAAK,KAAK,CAAhE,GAAoE,KAAK,CAAzE,GAA6EA,EAAE,EAA/E;AACA,SAAKhC,kBAAL,CAAwB4C,MAAxB,CAA+BpB,GAA/B;AACA,WAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,CAAP;AACA,SAAK0F,0BAAL,CAAgC1F,GAAhC,EAAqC,KAAKd,WAA1C;AACH;AACD;AACJ;AACA;;;AACIqG,EAAAA,QAAQ,CAACvF,GAAD,EAAM;AACV,WAAO,KAAK3B,MAAL,CAAYkD,GAAZ,CAAgBvB,GAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI2F,EAAAA,QAAQ,CAAC3F,GAAD,EAAM4F,YAAN,EAAoB;AACxB,QAAI,KAAK/H,KAAL,CAAWQ,MAAX,IAAqB,KAAKR,KAAL,CAAWQ,MAAX,CAAkB2B,GAAlB,CAAzB,EAAiD;AAC7C,aAAO,KAAKnC,KAAL,CAAWQ,MAAX,CAAkB2B,GAAlB,CAAP;AACH;;AACD,QAAIC,KAAK,GAAG,KAAK5B,MAAL,CAAYoH,GAAZ,CAAgBzF,GAAhB,CAAZ;;AACA,QAAIC,KAAK,KAAKC,SAAV,IAAuB0F,YAAY,KAAK1F,SAA5C,EAAuD;AACnDD,MAAAA,KAAK,GAAGvD,WAAW,CAACkJ,YAAD,EAAe;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAf,CAAnB;AACA,WAAKP,QAAL,CAActF,GAAd,EAAmBC,KAAnB;AACH;;AACD,WAAOA,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI6F,EAAAA,SAAS,CAAC9F,GAAD,EAAM;AACX,WAAO,KAAKlB,YAAL,CAAkBkB,GAAlB,MAA2BE,SAA3B,IAAwC,CAAC,KAAKjC,OAA9C,GACD,KAAKa,YAAL,CAAkBkB,GAAlB,CADC,GAED,KAAK+F,qBAAL,CAA2B,KAAK9H,OAAhC,EAAyC+B,GAAzC,EAA8C,KAAKhC,OAAnD,CAFN;AAGH;AACD;AACJ;AACA;AACA;;;AACIgI,EAAAA,aAAa,CAAChG,GAAD,EAAMC,KAAN,EAAa;AACtB,SAAKX,UAAL,CAAgBU,GAAhB,IAAuBC,KAAvB;AACH;AACD;AACJ;AACA;AACA;;;AACIgG,EAAAA,aAAa,CAACjG,GAAD,EAAM;AACf,QAAIQ,EAAJ;;AACA,UAAM;AAAEhB,MAAAA;AAAF,QAAc,KAAK3B,KAAzB;AACA,UAAMqI,gBAAgB,GAAG,OAAO1G,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAP,KAAmB,QAAlD,GACnB,CAACgB,EAAE,GAAGrD,uBAAuB,CAAC,KAAKU,KAAN,EAAa2B,OAAb,CAA7B,MAAwD,IAAxD,IAAgEgB,EAAE,KAAK,KAAK,CAA5E,GAAgF,KAAK,CAArF,GAAyFA,EAAE,CAACR,GAAD,CADxE,GAEnBE,SAFN;AAGA;AACR;AACA;;AACQ,QAAIV,OAAO,IAAI0G,gBAAgB,KAAKhG,SAApC,EAA+C;AAC3C,aAAOgG,gBAAP;AACH;AACD;AACR;AACA;AACA;;;AACQ,UAAMlC,MAAM,GAAG,KAAKmC,sBAAL,CAA4B,KAAKtI,KAAjC,EAAwCmC,GAAxC,CAAf;AACA,QAAIgE,MAAM,KAAK9D,SAAX,IAAwB,CAACtD,aAAa,CAACoH,MAAD,CAA1C,EACI,OAAOA,MAAP;AACJ;AACR;AACA;AACA;;AACQ,WAAO,KAAKzE,aAAL,CAAmBS,GAAnB,MAA4BE,SAA5B,IACHgG,gBAAgB,KAAKhG,SADlB,GAEDA,SAFC,GAGD,KAAKZ,UAAL,CAAgBU,GAAhB,CAHN;AAIH;;AACDqE,EAAAA,EAAE,CAAC+B,SAAD,EAAYC,QAAZ,EAAsB;AACpB,QAAI,CAAC,KAAK3H,MAAL,CAAY0H,SAAZ,CAAL,EAA6B;AACzB,WAAK1H,MAAL,CAAY0H,SAAZ,IAAyB,IAAI3J,mBAAJ,EAAzB;AACH;;AACD,WAAO,KAAKiC,MAAL,CAAY0H,SAAZ,EAAuBhG,GAAvB,CAA2BiG,QAA3B,CAAP;AACH;;AACDxH,EAAAA,MAAM,CAACuH,SAAD,EAAqB;AACvB,QAAI5F,EAAJ;;AADuB,sCAAN8F,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAEvB,KAAC9F,EAAE,GAAG,KAAK9B,MAAL,CAAY0H,SAAZ,CAAN,MAAkC,IAAlC,IAA0C5F,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAAC3B,MAAH,CAAU,GAAGyH,IAAb,CAAnE;AACH;;AAhbe;;AAkbpB,MAAMpB,YAAY,GAAG,CAAC,SAAD,EAAY,GAAGpI,oBAAf,CAArB;AACA,MAAMmI,eAAe,GAAGC,YAAY,CAAC1H,MAArC;AAEA,SAASE,aAAT","sourcesContent":["import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { env } from '../utils/process.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"Unmount\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.onChange((latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.onRenderRequest(this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n            invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props), this.prevMotionValues);\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (this.hasValue(key))\n            this.removeValue(key);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n        this.bindToMotionValue(key, value);\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    /**\n     * Get a motion value for this key. If called with a default\n     * value, we'll create one if none exists.\n     */\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}