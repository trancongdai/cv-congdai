{"ast":null,"code":"import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nconst steps = stepsOrder.reduce((acc, key) => {\n  acc[key] = createRenderStep(() => runNextFrame = true);\n  return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n  const step = steps[key];\n\n  acc[key] = function (process) {\n    let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!runNextFrame) startLoop();\n    return step.schedule(process, keepAlive, immediate);\n  };\n\n  return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n  acc[key] = steps[key].cancel;\n  return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n  acc[key] = () => steps[key].process(frameData);\n\n  return acc;\n}, {});\n\nconst processStep = stepId => steps[stepId].process(frameData);\n\nconst processFrame = timestamp => {\n  runNextFrame = false;\n  frameData.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n  frameData.timestamp = timestamp;\n  isProcessing = true;\n  stepsOrder.forEach(processStep);\n  isProcessing = false;\n\n  if (runNextFrame) {\n    useDefaultElapsed = false;\n    onNextFrame(processFrame);\n  }\n};\n\nconst startLoop = () => {\n  runNextFrame = true;\n  useDefaultElapsed = true;\n  if (!isProcessing) onNextFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };","map":{"version":3,"sources":["/Users/daitran/Desktop/portfolio-starter-master/node_modules/framer-motion/dist/es/frameloop/index.mjs"],"names":["onNextFrame","defaultTimestep","createRenderStep","frameData","maxElapsed","useDefaultElapsed","runNextFrame","isProcessing","stepsOrder","steps","reduce","acc","key","sync","step","process","keepAlive","immediate","startLoop","schedule","cancelSync","cancel","flushSync","processStep","stepId","processFrame","timestamp","delta","Math","max","min","forEach"],"mappings":"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","sourcesContent":["import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n"]},"metadata":{},"sourceType":"module"}